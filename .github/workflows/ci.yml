name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  GOTOOLCHAIN: auto
  GO_VERSION: "1.22"
  RUST_VERSION: "1.75.0"

jobs:
  test:
    runs-on: arc-runner-shellcn

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Detect Rust modules
        id: rust_modules
        shell: bash
        run: |
          if compgen -G "rust-modules/*/Cargo.toml" > /dev/null; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Rust
        if: steps.rust_modules.outputs.found == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt

      - name: Cache Rust dependencies
        if: steps.rust_modules.outputs.found == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rust-modules/**/target/
          key: ${{ runner.os }}-cargo-${{ env.RUST_VERSION }}-${{ hashFiles('rust-modules/**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ env.RUST_VERSION }}-
            ${{ runner.os }}-cargo-

      - name: Build Rust FFI modules
        if: steps.rust_modules.outputs.found == 'true'
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          for manifest in rust-modules/*/Cargo.toml; do
            dir=$(dirname "$manifest")
            echo "Building $dir"
            if [ -f "$dir/Cargo.lock" ]; then
              (cd "$dir" && cargo build --locked --release)
            else
              (cd "$dir" && cargo build --release)
            fi
          done

      - name: Verify formatting
        run: |
          fmt_out=$(gofmt -l .)
          if [ -n "$fmt_out" ]; then
            echo "Go files need formatting:"
            echo "$fmt_out"
            exit 1
          fi

      - name: Build Go packages
        run: go build ./...

      - name: Run tests
        run: go test ./...
