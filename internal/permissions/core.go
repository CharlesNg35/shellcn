package permissions

func init() {
	perms := []*Permission{
		{
			ID:           "user.view",
			Module:       "core",
			Category:     "users",
			DisplayName:  "View Users",
			Description:  "View users",
			DefaultScope: "global",
		},
		{
			ID:           "user.create",
			Module:       "core",
			DependsOn:    []string{"user.view"},
			Category:     "users",
			DisplayName:  "Create Users",
			Description:  "Create new users",
			DefaultScope: "global",
		},
		{
			ID:           "user.edit",
			Module:       "core",
			DependsOn:    []string{"user.view"},
			Category:     "users",
			DisplayName:  "Edit Users",
			Description:  "Edit existing users",
			DefaultScope: "global",
		},
		{
			ID:           "user.delete",
			Module:       "core",
			DependsOn:    []string{"user.view", "user.edit"},
			Category:     "users",
			DisplayName:  "Delete Users",
			Description:  "Delete users",
			DefaultScope: "global",
		},
		{
			ID:           "user.invite",
			Module:       "core",
			DependsOn:    []string{"user.view"},
			Category:     "users",
			DisplayName:  "Invite Users",
			Description:  "Invite users via email",
			DefaultScope: "global",
		},
		{
			ID:           "team.view",
			Module:       "core",
			Category:     "teams",
			DisplayName:  "View Teams",
			Description:  "View teams",
			DefaultScope: "global",
		},
		{
			ID:           "team.manage",
			Module:       "core",
			DependsOn:    []string{"team.view"},
			Category:     "teams",
			DisplayName:  "Manage Teams",
			Description:  "Create and manage teams",
			DefaultScope: "global",
		},
		{
			ID:           "connection.view",
			Module:       "core",
			Category:     "connections",
			DisplayName:  "View Connections",
			Description:  "View connection protocols and resources",
			DefaultScope: "global",
		},
		{
			ID:           "connection.launch",
			Module:       "core",
			DependsOn:    []string{"connection.view"},
			Category:     "connections",
			DisplayName:  "Launch Connections",
			Description:  "Launch connections",
			DefaultScope: "resource",
		},
		{
			ID:           "connection.manage",
			Module:       "core",
			DependsOn:    []string{"connection.view"},
			Category:     "connections",
			DisplayName:  "Manage Connections",
			Description:  "Create and update connections",
			DefaultScope: "global",
		},
		{
			ID:           "connection.share",
			Module:       "core",
			DependsOn:    []string{"connection.manage"},
			Category:     "connections",
			DisplayName:  "Share Connections",
			Description:  "Manage connection sharing and visibility",
			DefaultScope: "global",
		},
		{
			ID:           "connection.folder.view",
			Module:       "core",
			Category:     "connections",
			DisplayName:  "View Connection Folders",
			Description:  "View connection folders",
			DefaultScope: "global",
		},
		{
			ID:           "connection.folder.manage",
			Module:       "core",
			DependsOn:    []string{"connection.folder.view", "connection.manage"},
			Category:     "connections",
			DisplayName:  "Manage Connection Folders",
			Description:  "Manage connection folders",
			DefaultScope: "global",
		},
		{
			ID:           "vault.view",
			Module:       "core",
			Category:     "vault",
			DisplayName:  "View Vault Entries",
			Description:  "View credential vault entries",
			DefaultScope: "global",
		},
		{
			ID:           "vault.create",
			Module:       "core",
			DependsOn:    []string{"vault.view"},
			Category:     "vault",
			DisplayName:  "Create Vault Entries",
			Description:  "Create credential vault entries",
			DefaultScope: "global",
		},
		{
			ID:           "vault.edit",
			Module:       "core",
			DependsOn:    []string{"vault.view"},
			Category:     "vault",
			DisplayName:  "Edit Vault Entries",
			Description:  "Edit credential vault entries",
			DefaultScope: "global",
		},
		{
			ID:           "vault.delete",
			Module:       "core",
			DependsOn:    []string{"vault.view"},
			Category:     "vault",
			DisplayName:  "Delete Vault Entries",
			Description:  "Delete credential vault entries",
			DefaultScope: "global",
		},
		{
			ID:           "vault.share",
			Module:       "core",
			DependsOn:    []string{"vault.view", "vault.edit"},
			Category:     "vault",
			DisplayName:  "Share Vault Entries",
			Description:  "Share credential vault entries",
			DefaultScope: "global",
		},
		{
			ID:           "vault.use_shared",
			Module:       "core",
			DependsOn:    []string{"vault.view"},
			Category:     "vault",
			DisplayName:  "Use Shared Vault Entries",
			Description:  "Use shared credential vault entries",
			DefaultScope: "resource",
		},
		{
			ID:           "vault.manage_all",
			Module:       "core",
			DependsOn:    []string{"vault.view", "vault.edit", "vault.delete"},
			Category:     "vault",
			DisplayName:  "Manage All Vault Entries",
			Description:  "Manage all credential vault entries",
			DefaultScope: "global",
		},
		{
			ID:           "permission.view",
			Module:       "core",
			Category:     "administration",
			DisplayName:  "View Permissions",
			Description:  "View permissions",
			DefaultScope: "global",
		},
		{
			ID:           "permission.manage",
			Module:       "core",
			DependsOn:    []string{"permission.view"},
			Category:     "administration",
			DisplayName:  "Manage Permissions",
			Description:  "Assign and revoke permissions",
			DefaultScope: "global",
		},
		{
			ID:           "audit.view",
			Module:       "core",
			Category:     "auditing",
			DisplayName:  "View Audit Logs",
			Description:  "View audit logs",
			DefaultScope: "global",
		},
		{
			ID:           "audit.export",
			Module:       "core",
			DependsOn:    []string{"audit.view"},
			Category:     "auditing",
			DisplayName:  "Export Audit Logs",
			Description:  "Export audit logs",
			DefaultScope: "global",
		},
		{
			ID:           "security.audit",
			Module:       "core",
			DependsOn:    []string{"audit.view"},
			Category:     "auditing",
			DisplayName:  "Run Security Audits",
			Description:  "Run security audits",
			DefaultScope: "global",
		},
		{
			ID:           "notification.view",
			Module:       "core",
			Category:     "notifications",
			DisplayName:  "View Notifications",
			Description:  "View in-app notifications",
			DefaultScope: "global",
		},
		{
			ID:           "notification.manage",
			Module:       "core",
			DependsOn:    []string{"notification.view"},
			Category:     "notifications",
			DisplayName:  "Manage Notifications",
			Description:  "Manage in-app notifications and broadcasts",
			DefaultScope: "global",
		},
	}

	driverPerms := []*Permission{
		{
			ID:           "protocol:ssh.connect",
			Module:       "protocols.ssh",
			DependsOn:    []string{"connection.launch"},
			Category:     "protocol:ssh",
			DisplayName:  "SSH Connect",
			Description:  "Initiate SSH sessions",
			DefaultScope: "resource",
			Metadata: map[string]any{
				"driver":      "ssh",
				"capability":  "connect",
				"displayIcon": "terminal",
			},
		},
		{
			ID:           "protocol:ssh.port_forward",
			Module:       "protocols.ssh",
			DependsOn:    []string{"protocol:ssh.connect"},
			Category:     "protocol:ssh",
			DisplayName:  "SSH Port Forward",
			Description:  "Forward ports through SSH tunnels",
			DefaultScope: "resource",
			Metadata: map[string]any{
				"driver":     "ssh",
				"capability": "port_forward",
			},
		},
		{
			ID:           "protocol:docker.exec",
			Module:       "protocols.docker",
			DependsOn:    []string{"connection.launch"},
			Category:     "protocol:docker",
			DisplayName:  "Docker Exec",
			Description:  "Execute commands in Docker containers",
			DefaultScope: "resource",
			Metadata: map[string]any{
				"driver":     "docker",
				"capability": "exec",
			},
		},
		{
			ID:           "protocol:vnc.desktop_control",
			Module:       "protocols.vnc",
			DependsOn:    []string{"connection.launch"},
			Category:     "protocol:vnc",
			DisplayName:  "Control Desktops",
			Description:  "Control VNC desktop sessions",
			DefaultScope: "resource",
			Metadata: map[string]any{
				"driver":     "vnc",
				"capability": "desktop_control",
			},
		},
	}

	perms = append(perms, driverPerms...)

	for _, perm := range perms {
		if err := Register(perm); err != nil {
			panic(err)
		}
	}
}
